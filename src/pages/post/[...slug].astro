---
// File: post/[...slug].astro
import "@/styles/globals.css";
import Header01 from "@/layouts/Header01.astro";
import SingleSection from "@/components/custom/SingleSection";
import Footer01 from "@/layouts/Footer01.astro";
import { Toaster } from "@/components/ui/toaster";
import { AstroSeo } from "@astrolib/seo";
import { createUniqueSlug } from "@/lib/utils";
import { ViewTransitions } from "astro:transitions";

export async function getStaticPaths() {
  const urlEndpoint = import.meta.env.PUBLIC_FASTAPI_ENDPOINT;

  try {
    const response = await fetch(`${urlEndpoint}/properties`, {
      method: "GET",
      headers: {
        "Cache-Control": "no-cache",
      },
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    const data = await response.json();

    if (!data || !data.items || !Array.isArray(data.items)) {
      console.error("Data tidak valid:", data);
      return [];
    }

    return data.items.map((property: { id: number; title: string }) => {
      const slug = createUniqueSlug(property.id, property.title);

      return {
        params: { slug },
        props: { propertyId: property.id },
      };
    });
  } catch (error) {
    console.error("Error fetching properties:", error);
    return [];
  }
}

interface Property {
  user_id: number;
  category_id: number;
  title: string;
  short_desc: string;
  description: string;
  price: number;
  period: string;
  address: string;
  province_id: string;
  district_id: string;
  city_id: string;
  village_id: string;
  coordinates: string | null;
  nearby: string;
  ads: string;
  status: string;
  views_count: number;
  meta_title: string | null;
  meta_description: string | null;
  keywords: string;
  id: number;
  created_at: string;
  updated_at: string;
  facility: {
    certificate: string;
    electricity: number;
    line_phone: string;
    internet: string;
    road_width: string;
    water_source: string;
    hook: string | null;
    condition: string | null;
    security: string | null;
    wastafel: string | null;
    id: number;
  };
  specification: {
    land_size: number;
    building_size: number;
    bedroom: number;
    carpot: string | null;
    bathroom: number;
    dining_room: string | null;
    living_room: string | null;
    floors: number;
    id: number;
  };
  images: {
    image_url: string;
    image_remote_url: string | null;
    is_primary: boolean;
    id: number;
  }[];
  province: {
    code: string;
    name: string;
    level: string;
  };
  district: {
    code: string;
    name: string;
    level: string;
  };
  city: {
    code: string;
    name: string;
    level: string;
  };
  village: {
    code: string;
    name: string;
    level: string;
  };
  user: {
    name: string;
    email: string;
    password: string;
    role: string;
    is_active: boolean;
    id: number;
    created_at: string;
    updated_at: string;
    profile: {
      first_name: string;
      last_name: string;
      phone: string;
      email: string;
      whatsapp: string;
      company_name: string;
      avatar: string;
      remote_url: string;
      biodata_company: string;
      jobdesk: string | null;
    };
  };
}

const { propertyId } = Astro.props;
const urlEndpoint = import.meta.env.PUBLIC_FASTAPI_ENDPOINT;

const response = await fetch(`${urlEndpoint}/properties/${propertyId}`, {
  method: "GET",
  headers: {
    "Cache-Control": "no-cache",
  },
});

if (!response.ok) {
  return Astro.redirect("/404");
}

const property: Property = await response.json();

// Fungsi untuk memvalidasi properti
function isValidProperty(property: any): property is Property {
  return (
    property &&
    typeof property === "object" &&
    "id" in property &&
    "title" in property
  );
}

// Validasi properti
if (!isValidProperty(property)) {
  return Astro.redirect("/404");
}

const uniqueSlug = createUniqueSlug(property.id, property.title);
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <ViewTransitions />
    <title>{property.title}</title>

    <AstroSeo
      title={property.title}
      description={property.short_desc || "Deskripsi properti tidak tersedia"}
      canonical={`${import.meta.env.PUBLIC_HOME_DOMAIN}/post/${uniqueSlug}`}
      openGraph={{
        url: `${import.meta.env.PUBLIC_HOME_DOMAIN}/post/${uniqueSlug}`,
        title: property.title,
        description: property.short_desc || "Deskripsi properti tidak tersedia",
        images:
          property.images && property.images.length > 0
            ? [
                {
                  url: `${import.meta.env.PUBLIC_HOME_DOMAIN}/storage/${property.images[0].image_url.replace(/[",/\\]/g, "")}`,
                  width: 800,
                  height: 600,
                  alt: `Gambar ${property.title}`,
                  type: "image/jpeg",
                },
              ]
            : [],
        site_name: "Bosque Properti",
      }}
      twitter={{
        handle: "@bosqproperti",
        site: "@bosqproperti",
        cardType: "summary_large_image",
      }}
    />
  </head>
  <body>
    <Header01 />
    <SingleSection property={property as any} client:load />

    <Toaster client:load />
    <Footer01 />
    <slot />
  </body>
</html>
